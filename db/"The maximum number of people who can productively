"The maximum number of people who can productively, simultaneously work on css is one."

 - Paul Battley

 Think about how many developers/tracks write CSS in the similar way? How do you make it consistant while it continuously evolve? Keep it DRY

Nicole Sullivan's OOCSS
Jeremy Keith's Pattern Primer
Natalie Downe's Practical maintainable CSS Presentation
Jina Bolton's CSS Workflow presentation

does SASS preprocessor solves the architecture problem?

//
// Modularization
//
@import "button";
@import "images";
@import "layout";
@import "nav";
@import "tables";
@import "navigation";
@import "forms";
@import "section";
@import "fluid-container";
@import "table-filter";
@import "modal";
@import "dropdown";
@import "progress";
@import "box";
@import "icons";

Naming convention - Clarifies an intent, identify where it belongs

Categorization

Identify what a HTML element is doing
* Base Selectors
* CSS Resets
* Normalize

If you write a CSS to overwrite another CSS - It means you are writing inefficient CSS

How do you identify major container elements and group them?

Modules 
contain content
Majority of the site
Each module is a user interface
Isolate Modules from each other
Prevent styles from coming in or bleeding out

Module Variations / Sub Modules
Buttons
Small, Medium, Large, cancel
Styles are mostly same

"Don't let the context of the style drive your decisions. Identify opportunities to minimize code."

Module Child Elements

<div class="modal modal-large">
  <form>
    <div class="modal-header">
      <h2>Heading</h2>
      <button class="button button-clean"> close</button>
    </div>
    <div class="modal-body">
      content
    </div>
    <div class="model-footer">
      <button class="button">Cancel</button>
      <button class="button button-save">Save</button>
    </div>
  </form>
</div>


    THEME (No need it)
-----------------
State  |  Module
       |--------- 
       |  Layout
-----------------
    BASE


State
Default state
Deactive state
Active state

Like module variations (Submodules) but indicate a javascript dependency

* Every style serves one of these categories wether is intentional or not
* Isolating these allows easier reuse, testing and debugging
* Categorizing reveals patterns, easier to identify when things break the pattern (When the patterns break you will know UI is different and bring in your UXD, Confirm should we need this new pattern)

<< Layout styles exercise >>
layout-constrained




Naming Conventions - Clarifying the intent
==================
Fidgrid is a good place to start

Base Styles
  Element Selectors

Layout Styles
  .layout-header
  .layout-content
  .layout-footer

Specificity can be dangerous
============================

Inline - Id - Class - Elements

a {color:#039}
.subdued {color: #666}
#cancel {color: #900}


Specificity Bustor - !important

a {color: #039}
.subdued {color: #666}
.cancel {color: #900}


Modules
========
.tab {}
.listview {}
.button {}

Minification is not a good idea as it is refered in many places

Module Variations
=================
.button{}
.button-small{}
.button-medium{}
.button-large{}
.button-cancel{}

usage - use module class and module variation side by side.

Prefix the submodules with the name of the modules
Prefix is very helpful to know what it is related to
Prefix is very helpful to identify during pull request, lengthy code etc.


STATES - Module Variations
==========================

.button {}
.button-is-active {}
.button-is-disabled {}

Prefix states with "is-"
  - indicates a toggleable state
  - Likelyhood of js dependency
  - State that are specific to a module should include module name


text-xl {140%}
text-l {120%}
text {}
text-s {90%}
text-xs {80%}



Prefixing for versioning or packaging
=====================================

.next-button {}
.next-button-is-active {}
.next-button-is-disabled {}


Pure CSS
Framework prefixed with pure. Naming convention helps seperate it.
https://speakerdeck.com/vjeux/react-css-in-js

.modulename 
 - no hyphens (Always easy to identify)
 - Always in the root node

.modulename-submodule
 - no hyphens

.modulename-subcomponent
 - no different from submodule

Alternative (Block Element Modifier BEM)
.module-name
.module-name--submodule
.module-name__subcomponent
 - Lot of hyphens

Alternative (Addy Osmani)
.moduleName
.moduleName-subModule
.moduleName--subcomponent

Consider (Being consistant)
 - Root Node
 - Sub-modules
 - Sub-components



Patterns
========
Layouts specify widths and margins
Modules expand to fill layout
States are !important 
!important anywhere else means we have to refactor something

Icon module
sprite
height, width & display inline-block









What are grid systems?

flexbox
cssGrid
960.gs
bootstrap

Helper classes are module variations of grid system


Bootstrap
 - Lot of unused code that you need to maintain and deliver to user and overwrite existing styles to the way you want.
 - Dont know what problem we will run into

Fidgrid can be customized and unused styles thrown out (Minimum required design needed)
 - New 

Naming conventins change in versions
http://slides.com/pamelafox/when-bootstrap-attacks#/

Its a gray line between the layout and module Layout defines width (defines a constraint)
GridSystem defines width
Module contains the content and it should stretch and move around

Fixed width layout?
Fluid Layout?

FidGrid Classes and explanation

Semantic Grids


Enforcing coding standards




